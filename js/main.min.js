$(".burger").click(function () {
    $(".header").toggleClass("_open")
    $("body").toggleClass("fixed-body")
})

$(window).scroll(function(){
    setFixHeader()
});
$(window).resize(function(){
    setFixHeader()
});


setFixHeader()


function setFixHeader() {
    let headerHeight = getHeaderHeight()
    let st = $(this).scrollTop();
    if(st > headerHeight){
        $(".header").addClass("_fix")
    } else{
        $(".header").removeClass("_fix")
    }
}

function getHeaderHeight() {
    let header = document.querySelector(".header")
    if(!header){
        return
    }
    return header.getBoundingClientRect().height
}

function Sliders() {
    let SlidersArray = []

    let sliders = document.querySelectorAll(".slider")
    sliders.forEach((slider,index) => {
        slider.setAttribute("data-slider-id",index)

        SlidersArray[index] = new Swiper(`.slider[data-slider-id="${index}"] .swiper-container`, {
            slidesPerView: "auto",
            spaceBetween: 0,
            watchSlidesProgress: true,
            preventClicks :true,
            a11y: false,
            observer: true,
            observeParents: true,
            observeSlideChildren: true,

            navigation: {
                nextEl: `.slider[data-slider-id="${index}"] .swiper-button-next`,
                prevEl: `.slider[data-slider-id="${index}"] .swiper-button-prev`,
            },
            pagination: {
                el: `.slider[data-slider-id="${index}"] .swiper-pagination`,
                type: 'bullets',
                clickable: true,
            },
        })
    })
}

function portfolioSliders() {
    let SlidersArray = []

    let sliders = document.querySelectorAll(".portfolio-slider")
    sliders.forEach((slider,index) => {
        let reverse = slider.classList.contains("_reverse")

        slider.setAttribute("data-slider-id",index)

        let autoplayOptions = {
            delay: 0,
            reverseDirection: reverse,
            // pauseOnMouseEnter: true,
            // disableOnInteraction: false
        }

        SlidersArray[index] = new Swiper(`.portfolio-slider[data-slider-id="${index}"] .swiper-container`, {
            slidesPerView: "auto",
            spaceBetween: 0,
            speed: 2000,
            loop: true,
            loopAdditionalSlides: 20,
            allowTouchMove: false,
            autoplay: autoplayOptions,
            on: {
                init() {
                    this.el.addEventListener('mouseenter', () => {
                        this.autoplay.stop();
                    });
                    this.el.addEventListener('mouseleave', () => {
                        this.autoplay.start();
                    });
                }
            },
        })

        // slider.onmouseenter = function () {
        //     SlidersArray[index].autoplay = false
        // }
    })
}

function gallery() {
    let SlidersArray = []

    let sliders = document.querySelectorAll(".gallery")
    sliders.forEach((slider,index) => {
        slider.setAttribute("data-slider-id",index)
        let gallery = {
            mySwiper: {},
            mySwiper2: {}
        }

        gallery.mySwiper = new Swiper(`.gallery[data-slider-id="${index}"] .mySwiper`, {
            spaceBetween: 0,
            slidesPerView: "auto",
            freeMode: true,
            watchSlidesProgress: true,
            direction: "vertical",
            breakpoints: {
                320: {
                    direction: "horizontal",
                },
                992: {
                    direction: "vertical",
                }
            }
        });
        gallery.mySwiper2 = new Swiper(`.gallery[data-slider-id="${index}"] .mySwiper2`, {
            spaceBetween: 0,
            direction: "vertical",
            loop: true,
            navigation: {
                nextEl: `.gallery[data-slider-id="${index}"] .swiper-button-next`,
                prevEl: `.gallery[data-slider-id="${index}"] .swiper-button-prev`,
            },
            thumbs: {
                swiper:  gallery.mySwiper,
            },
            breakpoints: {
                320: {
                    direction: "horizontal",
                },
                992: {
                    direction: "vertical",
                }
            }
        });

        SlidersArray[index] = gallery
    })

}


Sliders()
gallery()
portfolioSliders()

const parallaxContainers = document.querySelectorAll(".parallax-container")

parallaxContainers.forEach(container => {
    const parallaxItems = container.querySelectorAll(".parallax-item")
    parallaxItems.forEach(item => {
        const forX = 10;
        const forY = 30;
        const speed = 0.15

        let positionX = 0
        let positionY = 0
        let cordXPercent = 0
        let cordYPercent = 0

        function setMouseParallaxStyle() {
            const distX = cordXPercent - positionX
            const distY = cordYPercent - positionY

            positionX = positionX + (distX * speed)
            positionY = positionY + (distY * speed)

            item.style.cssText = `transform: translate(${positionX/forX}%,${positionY/forY}%);`

            requestAnimationFrame(setMouseParallaxStyle)
        }

        setMouseParallaxStyle()

        container.addEventListener("mousemove", function (e) {
            const parallaxWidth = container.offsetWidth
            const parallaxHeight = container.offsetHeight

            const cordX = e.pageX - parallaxWidth/2;
            const cordY = e.pageY - parallaxHeight/2;

            cordXPercent = cordX / parallaxWidth * 100
            cordYPercent = cordY / parallaxHeight * 100
        })
    })


})

function drawMap(id) {
    let path = document.querySelector(id);
    if(!path){
        return
    }
    let pathLength = path.getTotalLength();
    path.style.strokeDasharray = pathLength + ' ' + pathLength;
    path.style.strokeDashoffset = pathLength;

    window.addEventListener("scroll", function(e) {
        let mapHeight = $(".map").height()
        let scrollPercentage = ($(window).scrollTop() - $('.map').offset().top + (mapHeight * .35)) / mapHeight
        let drawLength = pathLength * scrollPercentage;
        path.style.strokeDashoffset = pathLength - drawLength;
    });
}

drawMap("#red-path")
drawMap("#red-path2")




function s(o, e, t) {
    return Math.min(Math.max(o, e), t);
}
function p({ from: o, to: e, percentage: t, unit: n }) {
    return o + (e - o) * t + (n || "");
}
const a = {
    offsetBottom: 0,
    offsetTop: 0,
    offsetRight: 0,
    offsetLeft: 0,
    addWrapper: !1,
    wrapperClass: "",
    container: document.documentElement
};
class r {
    static Container(e = document.documentElement) {
        return new h(e);
    }
    static Element(e, t) {
        return new _(e, { ...a, ...t });
    }
    onScroll(e) {
        this._handler = e, this._onScroll();
    }
}
class h extends r {
    constructor(e) {
        super(), this._container = e, (e === document.documentElement ? window : e).addEventListener("scroll", this._onScroll.bind(this));
    }
    _onScroll() {
        const e = this._container.scrollTop, t = this._container.scrollHeight - this._container.clientHeight, n = s(e / t, 0, 1) || 0, i = this._container.scrollLeft, c = this._container.scrollWidth - this._container.clientWidth, l = s(i / c, 0, 1) || 0;
        this._handler && typeof this._handler == "function" && requestAnimationFrame(() => this._handler({ percentageY: n, percentageX: l }));
    }
}
class _ extends r {
    constructor(e, t) {
        super(), this._element = e, this._options = t, this._lastPercentageY = null, this._lastPercentageX = null, this._options.addWrapper && this._addWrapper(), (this._options.container === document.documentElement ? window : this._options.container).addEventListener("scroll", this._onScroll.bind(this)), requestAnimationFrame(() => this._onScroll());
    }
    _addWrapper() {
        this._wrapper = document.createElement("div"), this._options.wrapperClass && this._wrapper.classList.add(this._options.wrapperClass), this._element.parentNode.insertBefore(this._wrapper, this._element), this._wrapper.appendChild(this._element);
    }
    get _containerClientHeight() {
        return this._options.container === window ? window.innerHeight : this._options.container.clientHeight;
    }
    get _containerClientWidth() {
        return this._options.container === window ? window.innerWidth : this._options.container.clientWidth;
    }
    get _elRectRelativeToContainer() {
        const t = (this._options.addWrapper ? this._wrapper : this._element).getBoundingClientRect();
        if (this._options.container === document.documentElement)
            return t;
        const n = this._options.container.getBoundingClientRect();
        return {
            width: t.width,
            height: t.width,
            left: t.left - n.left,
            top: t.top - n.top,
            right: t.right - n.right,
            bottom: t.bottom - n.bottom
        };
    }
    // side is a string with possible values: Top/Bottom/Left/Right
    getOffsetValue(e) {
        const t = `offset${e}`;
        return typeof this._options[t] == "function" ? this._options[t]() : this._options[t];
    }
    get _offsetBottom() {
        return this.getOffsetValue("Bottom");
    }
    get _offsetTop() {
        return this.getOffsetValue("Top");
    }
    get _offsetLeft() {
        return this.getOffsetValue("Left");
    }
    get _offsetRight() {
        return this.getOffsetValue("Right");
    }
    _calculatePercentageY() {
        const e = this._elRectRelativeToContainer, t = this._containerClientHeight - this._offsetBottom, n = this._offsetTop, i = t - n;
        return s((t - e.top) / i, 0, 1);
    }
    _calculatePercentageX() {
        const e = this._elRectRelativeToContainer, t = this._containerClientWidth - this._offsetRight, n = this._offsetLeft, i = t - n;
        return s((t - e.left) / i, 0, 1);
    }
    _onScroll() {
        const e = this._calculatePercentageY(), t = this._calculatePercentageX();
        this._handler && typeof this._handler == "function" && (this._lastPercentageY !== e || this._lastPercentageX !== t) && requestAnimationFrame(() => this._handler({ percentageY: e, percentageX: t })), this._lastPercentageY = e, this._lastPercentageX = t;
    }
}

const cardsContainer = document.querySelector('.work-type__items')
const cards = document.querySelectorAll('.work-card')

if(cards.length>0){
    cardsContainer.style.setProperty('--cards-count', cards.length)
    cardsContainer.style.setProperty(
        '--card-height',
        `${cards[0].clientHeight}px`
    )
    Array.from(cards).forEach((card, index) => {
        const offsetTop = 1.25 + index * 1.25
        // card.style.paddingTop = `${offsetTop}em`
        card.style.top = `${offsetTop * 3}em`
        if(window.innerWidth<=992){
            card.style.top = `${offsetTop * 2}em`
        }
        if (index === cards.length - 1) {
            return
        }
        const toScale = 1 - (cards.length - 1 - index) * 0.05
        const nextCard = cards[index + 1]
        const cardInner = card.querySelector('.work-card__inner')
        r.Element(nextCard, {
            offsetTop,
            offsetBottom: window.innerHeight - card.clientHeight
        }).onScroll(({ percentageY }) => {
            cardInner.style.scale = p({
                from: 1,
                to: toScale,
                percentage: percentageY * 2
            })
            cardInner.style.filter = `brightness(${p({
                from: 1,
                to: 0.3,
                percentage: percentageY
            })})`
        })
    })
}



let fileInput = document.querySelector("[data-upload-id='file-input']")

if(fileInput){
    console.log(fileInput)
    const upload = new FileUploadWithPreview.FileUploadWithPreview('file-input');

    upload.options.multiple = true

    $(document).on('change', '.input-container input', function(e) {
        $(this).parents(".file-input").addClass("_uploaded")
    })

    $(document).on('click', '.image-preview-item-clear', function(e) {
        let count = $(this).parents(".file-input").find(".image-preview-item").length
        if(count === 1){
            $(this).parents(".file-input").removeClass("_uploaded")
        }
    })
}



let body = document.querySelector("body")
let modalTogglers = document.querySelectorAll("[data-modal]")
let modals = document.querySelectorAll(".modal")

modalTogglers.forEach(el => {
    el.onclick = function () {
        let modalId = el.getAttribute("data-modal")
        openModal(modalId)
    }
})

function closeModals() {
    modals.forEach(modal => {
        modal.classList.remove("_active")
        body.classList.remove("fixed-body2")
        body.classList.remove("_open-modal")
    })
}

function openModal(modalId) {
    closeModals()
    let modal = document.querySelector(`#${modalId}`)
    let closeButtons = modal.querySelectorAll(`._close-modal`)

    modal.classList.add("_active")
    body.classList.add("fixed-body2")
    body.classList.add("_open-modal")


    closeButtons.forEach(btn => {
        btn.onclick = ()=> {
            modal.classList.remove("_active")
            body.classList.remove("fixed-body2")
            body.classList.remove("_open-modal")
        }
    })
}

var getScrollBarSize = (function() {
    var el = window.document.createElement('textarea'), style = {
        'visibility': 'hidden', 'position': 'absolute', 'zIndex': '-2147483647',
        'top': '-1000px', 'left': '-1000px', 'width': '1000px', 'height': '1000px',
        'overflow': 'scroll', 'margin': '0', 'border': '0', 'padding': '0'
    }, support = el.clientWidth !== undefined && el.offsetWidth !== undefined;

    for (var key in style) {
        if (style.hasOwnProperty(key)) {
            el.style[key] = style[key];
        }
    }

    return function() {
        var size = null;
        if (support && window.document.body) {
            window.document.body.appendChild(el);
            size = [el.offsetWidth - el.clientWidth, el.offsetHeight - el.clientHeight];
            window.document.body.removeChild(el);
        }

        document.documentElement.style.setProperty('--scrollWidth', `${size[0]}px`);
        return size;
    };
})();


window.addEventListener('DOMContentLoaded', () => {
    fix100vh();
    window.addEventListener('resize', () => {
        fix100vh();
        getScrollBarSize()
    })

    getScrollBarSize()

})

function fix100vh() {
    let vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', `${vh}px`);
}

//# sourceMappingURL=../sourcemaps/main.min.js.map
